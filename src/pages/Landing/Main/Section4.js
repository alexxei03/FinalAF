import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';

const LandingMainSection4 = () => {
    const { t } = useTranslation();
    const faqData = [
        {
            question: t('faq.question1', 'Как я могу зарегистрироваться на платформе и начать обучение?'),
            answer: t(
                'faq.answer1',
                'Для регистрации на нашей платформе, пожалуйста, перейдите на страницу регистрации и заполните необходимые поля: ваше ФИО, электронную почту и пароль. После регистрации вы получите подтверждающее письмо на указанную электронную почту. Следуйте инструкциям в письме, чтобы активировать ваш аккаунт. После активации вы сможете войти в систему, выбрать интересующие вас курсы и начать обучение.'
            )
        },
        {
            question: t('faq.question2', 'Какие требования для компьютера или устройства нужны для прохождения курсов?'),
            answer: t(
                'faq.answer2',
                'Для прохождения курсов на нашей платформе, рекомендуется иметь устройство (компьютер или ноутбук) с подключением к интернету. Для выполнения тестирований, необходимо наличие встроенной камеры на устройстве и стабильное интернет-соединение. Мы также рекомендуем обновлять браузер до последней версии, чтобы обеспечить оптимальную работу платформы и доступ ко всем функциональным возможностям.'
            )
        },
        {
            question: t('faq.question3', 'Какие преимущества дает использование технологии Blockchain для сертификации?'),
            answer: t(
                'faq.answer3',
                'Использование технологии Blockchain для сертификации курсов обеспечивает высокий уровень безопасности и прозрачности. Сертификаты, сохраненные на Blockchain, невозможно подделать или изменить, что гарантирует их подлинность. Кроме того, доступ к сертификату возможен в любой момент, и он всегда будет храниться в безопасности благодаря распределенной структуре Blockchain.'
            )
        },
        {
            question: t('faq.question4', 'Как работает система прокторинга на платформе и как обеспечивается честность тестирования?'),
            answer: t(
                'faq.answer4',
                'Наша система прокторинга проводит автоматический мониторинг без присутствия живых прокторов. Во время экзамена программа отслеживает активность на экране, движения через камеру, чтобы предотвратить попытки мошенничества. Прокторы могут вмешаться в процесс и аннулировать результаты, если обнаружат подозрительные действия.'
            )
        },
        {
            question: t('faq.question5', 'Как стать ментором на платформе и предоставить свой собственный курс для обучения?'),
            answer: t(
                'faq.answer5',
                'Чтобы стать ментором на нашей платформе, вам необходимо иметь опыт и знания в вашей области. Заполните форму заявки на становление ментором, указав ваш опыт, область экспертизы и предложение курса. Наша команда проведет ревью вашей заявки и свяжется с вами для обсуждения дальнейших шагов. Мы предлагаем нашим менторам площадку для работы, а также полную поддержку в создании и распространении их курсов.'
            )
        }
    ];

    const [activeFAQ, setActiveFAQ] = useState(0);

    return (
        <section className="sct4">
            <div className="container">
                <div className="sct4-h1">{t('faq.title', 'Часто задаваемые вопросы')}</div>
                <div className="sct4-columns">
                    <div className="column1">
                        <div className="sct4-elems">
                            {faqData.map((faq, index) => (
                                <div
                                    key={index}
                                    className={`sct4-el ${activeFAQ === index ? 'active' : ''}`}
                                    onClick={() => setActiveFAQ(index)}
                                >
                                    <div className="sct4-el1">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                            <circle cx="12" cy="12" r="12" fill="#B2D1FF" />
                                        </svg>
                                    </div>
                                    <div className="el-text">{faq.question}</div>
                                    <div className="sct4-el2">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                            <path d="M8 4L16 12L8 20" stroke="#B2D1FF" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                                        </svg>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                    <div className="column2">
                        <div className="col2-card">
                            <div className="col2-h1">{faqData[activeFAQ].question}</div>
                            <div className="col2-h2" dangerouslySetInnerHTML={{ __html: faqData[activeFAQ].answer }}></div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default LandingMainSection4;